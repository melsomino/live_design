// Generated by CoffeeScript 1.8.0
var Progress, ai_run, bridge_intruder, bridge_run, create_palette_window, require, require_modules;

require_modules = {};

require = function(name) {
  var file, module, script;
  module = require_modules[name];
  if (!module === void 0) {
    return module;
  }
  file = new File("" + $.scripts_path + "/" + name + ".js");
  if (!file.exists) {
    $.write("module '" + name + "' not found");
    return null;
  }
  file.open('r');
  script = "(function(){var exports={};" + (file.read()) + ";return exports})();";
  file.close();
  module = eval(script);
  require_modules[name] = module;
  return module;
};

bridge_intruder = function(scripts_path, command) {
  var a, action, action_name, args, b, module, module_name, split;
  $.scripts_path = scripts_path;
  $.evalFile(new File("" + scripts_path + "/require.js"), 100000);
  split = function(s, d) {
    var p;
    p = s.indexOf(d);
    if (p >= 0) {
      return [s.substr(0, p), s.substr(p + 1)];
    } else {
      return [s, void 0];
    }
  };
  a = split(command, ' ');
  b = split(a[0], '.');
  module_name = b[0];
  action_name = b[1];
  args = a[1];
  module = require(module_name);
  if (!module) {
    alert("module '" + module_name + "' not found");
    return;
  }
  if (action_name === void 0) {
    action = module;
  } else {
    action = module[action_name];
    if (!action) {
      alert("module '" + module_name + "' does not contains action '" + action_name + "'");
      return;
    }
  }
  action(args);
  return '';
};

bridge_run = function(app, command) {
  var call, scripts_path;
  scripts_path = (new File($.fileName)).path;
  call = new BridgeTalk;
  call.target = app;
  call.body = "(" + (bridge_intruder.toString()) + ")('" + scripts_path + "','" + command + "');";
  call.onError = function(error) {
    alert("Error = " + error.body);
  };
  call.send();
};

ai_run = function(command) {
  bridge_run('illustrator', command);
};

create_palette_window = function(win_title, def) {
  var btn, command, grp, grp_def, grp_title, title, win;
  win = new Window("palette { text: '" + win_title + "', resizeable: true }");
  for (grp_title in def) {
    grp_def = def[grp_title];
    grp = win.add('group { orientation: "row", alignChildren: "fill", alignment: ["fill", "top"] }');
    for (title in grp_def) {
      command = grp_def[title];
      btn = grp.add("button {text: \"" + title + "\", alignment: \"fill\" }");
      btn.onClick = (function(cmd) {
        return function() {
          return ai_run(cmd);
        };
      })(command);
    }
  }
  win.onResizing = win.onResize = function() {
    return this.layout.resize();
  };
  win.onShow = function() {
    return win.minimumSize = win.size;
  };
  win.onClose = function() {
    return true;
  };
  win.show();
  return win;
};

Progress = (function() {
  function Progress(title, totals) {
    this.win = new Window('palette', title, [150, 150, 600, 200]);
    this.win.progress_label = this.win.add('statictext', [10, 10, 320, 25], "iPhone export");
    this.win.progress = this.win.add('progressbar', [8, 28, 440, 38], 0, totals);
    this.win.show();
    return;
  }

  Progress.prototype.next = function(message) {
    ++this.win.progress.value;
    this.win.progress_label.text = message;
    this.win.update();
  };

  Progress.prototype.close = function() {
    this.win.close();
    delete this.win;
  };

  return Progress;

})();
