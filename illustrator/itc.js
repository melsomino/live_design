// Generated by CoffeeScript 1.8.0
var Snapshots, ai, devs, langs;

ai = require('ai');

devs = {
  ph4: {
    title: 'iPhone 4',
    file: '3.5-Inch',
    device: 'phone'
  },
  ph5: {
    title: 'iPhone 5',
    file: '4-Inch',
    device: 'phone'
  },
  ph6: {
    title: 'iPhone 6',
    file: '4.7-Inch',
    device: 'phone'
  },
  ph6p: {
    title: 'iPhone 6+',
    file: '5.5-Inch',
    device: 'phone6p'
  },
  pd: {
    title: 'iPad',
    file: 'iPad',
    device: 'pad'
  }
};

langs = {
  de: {
    title: 'German',
    file: 'German',
    style: 'roman'
  },
  en: {
    title: 'English',
    file: 'English',
    style: 'roman'
  },
  es: {
    title: 'Spanish',
    file: 'Spanish',
    style: 'roman'
  },
  fr: {
    title: 'French',
    file: 'French',
    style: 'roman'
  },
  it: {
    title: 'Italian',
    file: 'Italian',
    style: 'roman'
  },
  ja: {
    title: 'Japan',
    file: 'Japan',
    style: 'asian'
  },
  ko: {
    title: 'Korean',
    file: 'Korean',
    style: 'asian'
  },
  ru: {
    title: 'Russian',
    file: 'Russian',
    style: 'roman'
  },
  zh_hans: {
    title: 'Simplified Chinese',
    file: 'Simplified_Chinese',
    style: 'asian'
  },
  zh_hant: {
    title: 'Traditional Chinese',
    file: 'Traditional_Chinese',
    style: 'asian'
  }
};

Snapshots = (function() {
  function Snapshots() {
    this.app = ai.ios_app();
    this.errors = [];
    return;
  }

  Snapshots.prototype.set_lang = function(lang_name) {
    var dev_name, i, item_name, loc_contents, loc_visible, snapshot, snapshot_name, _i, _ref;
    loc_visible = (function(_this) {
      return function(lang_name, dev_name, snapshot_name, name) {
        var enum_lang_name, has_visible, try_loc;
        has_visible = false;
        try_loc = function(test_lang_name, expect_lang_name) {
          var e, is_visible, item, n;
          n = "" + dev_name + " " + snapshot_name + " " + name + " " + test_lang_name;
          try {
            item = activeDocument.pageItems.getByName(n);
            is_visible = test_lang_name === expect_lang_name;
            item.hidden = !is_visible;
            has_visible = has_visible || is_visible;
            return true;
          } catch (_error) {
            e = _error;
            _this.errors.push("" + n + " not found");
            return false;
          }
        };
        for (enum_lang_name in langs) {
          try_loc(enum_lang_name, lang_name);
        }
        if (!has_visible) {
          try_loc('en', 'en');
        }
      };
    })(this);
    loc_contents = (function(_this) {
      return function(lang_name, dev_name, snapshot_name, name, contents) {
        var e, item, style;
        name = "" + dev_name + " " + snapshot_name + " " + name;
        try {
          item = activeDocument.pageItems.getByName(name);
          item.contents = contents[lang_name];
          style = activeDocument.characterStyles.getByName("" + devs[dev_name].device + "_" + langs[lang_name].style);
          style.applyTo(item.textRange, true);
        } catch (_error) {
          e = _error;
          _this.errors.push("" + name + " not found");
        }
      };
    })(this);
    for (dev_name in devs) {
      for (snapshot_name in this.app.itc_snapshots) {
        snapshot = this.app.itc_snapshots[snapshot_name];
        for (item_name in snapshot) {
          if (item_name === '_v') {
            for (i = _i = 0, _ref = snapshot._v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              loc_visible(lang_name, dev_name, snapshot_name, snapshot._v[i]);
            }
          } else {
            loc_contents(lang_name, dev_name, snapshot_name, item_name, snapshot[item_name]);
          }
        }
      }
    }
  };

  Snapshots.prototype["export"] = function() {
    var dev_name, lang_name, progress, save_image, snapshot_name, totals;
    save_image = (function(_this) {
      return function(lang_name, dev_name, snapshot_name) {
        var artboard_index, artboard_name, d, l, _i, _ref;
        artboard_name = "" + dev_name + " " + snapshot_name;
        for (artboard_index = _i = 0, _ref = activeDocument.artboards.length; 0 <= _ref ? _i < _ref : _i > _ref; artboard_index = 0 <= _ref ? ++_i : --_i) {
          if (activeDocument.artboards[artboard_index].name === artboard_name) {
            activeDocument.artboards.setActiveArtboardIndex(artboard_index);
            l = langs[lang_name];
            d = devs[dev_name];
            ai.export_jpeg(1, "" + _this.app.itc_snapshots_path + "/" + l.file + "  " + d.file + "  " + snapshot_name + ".jpeg");
          }
        }
      };
    })(this);
    totals = 0;
    for (dev_name in devs) {
      for (snapshot_name in this.app.itc_snapshots) {
        ++totals;
      }
    }
    progress = new Progress('Export App Store Shapshots', totals);
    try {
      lang_name = 'ja';
      for (dev_name in devs) {
        for (snapshot_name in this.app.itc_snapshots) {
          progress.next("" + langs[lang_name].title + ": " + devs[dev_name].title + " (" + snapshot_name + ")");
          save_image(lang_name, dev_name, snapshot_name);
        }
      }
    } finally {
      progress.close();
    }
  };

  return Snapshots;

})();

exports.set_lang = function(lang) {
  (new Snapshots).set_lang(lang);
};

exports.export_snapshots = function() {
  (new Snapshots)["export"]();
};
